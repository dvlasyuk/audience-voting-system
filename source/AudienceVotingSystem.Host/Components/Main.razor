@page "/"

@using AudienceVotingSystem.DataAccess.Configuration
@using AudienceVotingSystem.DataAccess.Database
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options
@using MudBlazor

@inject IOptions<ApplicationConfiguration> Configuration
@inject DatabaseContext DatabaseContext

@if (_votingDetails is null)
{
    return;
}

<PageTitle>Результаты зрительского голосования @_votingDetails.Name</PageTitle>

<MudText Typo="Typo.h6">Приветствуем тебя, важный пирожочек!</MudText>
<MudText Class="mt-3">
    Добро пожаловать в систему зрительского голосования СПбСО. Сейчас данная система используется для зрительского
    голосования <strong>@_votingDetails.Name</strong>. В разворачиваемой секции ниже ты можешь найти параметры
    этого голосования и кнопку-ссылку на форму голосования для участников. В таблице представлены общие результаты
    голосования (обрати внимание, что эта и все другие таблицы поддерживают сортировку и поиск по различным колонкам).
    Воспользовавшись кнопкой <em>Список голосов</em> ты сможешь посмотреть полный список голосов, отданных за
    конкретного кандидата и дополнительные комментарии, которые оставили участники
</MudText>

<MudExpansionPanels Class="mt-3 mb-3">
    <MudExpansionPanel>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Info" />
                <MudText Color="Color.Primary" Class="ml-3">Параметры голосования</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudText>Допустимо ли голосование за свой отряд: <strong>@(_votingDetails.FriendlyVoting ? "Да" : "Нет")</strong></MudText>
            <MudText>Количество голосов от одного зрителя: <strong>@_votingDetails.VotesQuantity</strong></MudText>
            <MudText>Общее число кандидатов в голосовании <strong>@_votingDetails.CandidatesQuantity</strong></MudText>
            <MudText>Общее число голосов, отданных зрителями: <strong>@_votingDetails.TotalVotesQuantity</strong></MudText>
            <MudDivider Class="mt-3" />
            <MudButton
                Href="@($"/voting-form")"
                Variant="Variant.Outlined"
                Color="Color.Secondary"
                StartIcon="@Icons.Material.Filled.QrCode"
                Class="mt-3">
                    Форма голосования
            </MudButton>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

<MudTable
    Items="@_votingCandidates"
    Filter="FilterRecords"
    Breakpoint="Breakpoint.None"
    Hover="true">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Кандидаты голосования</MudText>
        <MudSpacer />
        <MudTextField
            @bind-Value="_searchFilter"
            MaxLength="50"
            Clearable="true"
            Placeholder="Поиск"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" />
    </ToolBarContent>

    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh><MudTableSortLabel T="VotingCandidate" SortBy="SelectNameField">Название/имя участника</MudTableSortLabel></MudTh>
        <MudTh>Связанные отряды</MudTh>
        <MudTh><MudTableSortLabel T="VotingCandidate" SortBy="SelectQuantityField">Количество голосов</MudTableSortLabel></MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd>@context.Number</MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd>
            @foreach (var item in @context.Brigades)
            {
                @item
                <br />
            }
        </MudTd>
        <MudTd>@context.VotesQuantity</MudTd>
        <MudTd>
            <MudButton
                Href="@context.VotesLink"
                Variant="Variant.Outlined"
                Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.Info">
                    Список голосов
            </MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    private VotingDetails? _votingDetails = null;
    private IEnumerable<VotingCandidate> _votingCandidates = new List<VotingCandidate>();
    private string? _searchFilter;

    protected override async Task OnInitializedAsync()
    {
        var candidateIds = Configuration.Value.Voting.Candidates
            .Select(item => item.Identifier)
            .ToList();

        var savedVotes = await DatabaseContext.ParticipantVotes
            .Where(item => candidateIds.Contains(item.CandidateId))
            .ToListAsync();

        _votingDetails = new VotingDetails(
            Name: Configuration.Value.Voting.Name,
            FriendlyVoting: Configuration.Value.Voting.FriendlyVoting,
            VotesQuantity: Configuration.Value.Voting.VotesQuantity,
            CandidatesQuantity: Configuration.Value.Voting.Candidates.Count,
            TotalVotesQuantity: savedVotes.Count);

        var brigades = Configuration.Value.Brigades.ToDictionary(brigade => brigade.Identifier);
        _votingCandidates = Configuration.Value.Voting.Candidates
            .OrderBy(candidate => candidate.Identifier)
            .Select((candidate, index) => new VotingCandidate(
                Number: index + 1,
                Identifier: candidate.Identifier,
                Name: candidate.Name,
                Brigades: candidate.Brigades
                    .Select(identifier => brigades[identifier])
                    .Select(brigade => brigade.Name)
                    .ToList(),
                VotesQuantity: savedVotes
                    .Count(vote => vote.CandidateId == candidate.Identifier),
                VotesLink: $"/votes/{candidate.Identifier}"))
            .ToList();
    }

    private bool FilterRecords(VotingCandidate voting)
    {
        return string.IsNullOrWhiteSpace(_searchFilter) ||
            voting.Name.Contains(_searchFilter, StringComparison.OrdinalIgnoreCase) ||
            voting.Brigades.Any(brigade => brigade.Contains(_searchFilter, StringComparison.OrdinalIgnoreCase)) ||
            voting.Identifier.Contains(_searchFilter, StringComparison.OrdinalIgnoreCase);
    }

    private object SelectNameField(VotingCandidate voting) => voting.Name;
    private object SelectQuantityField(VotingCandidate voting) => voting.VotesQuantity;

    private record VotingDetails(
        string Name,
        bool FriendlyVoting,
        int VotesQuantity,
        int CandidatesQuantity,
        int TotalVotesQuantity);

    private record VotingCandidate(
        int Number,
        string Identifier,
        string Name,
        IReadOnlyCollection<string> Brigades,
        int VotesQuantity,
        string VotesLink);
}
